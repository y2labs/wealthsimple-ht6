# import {UserAchivement, Pet, PurchasedItem} from 'src/generated/prisma.graphql'

type Viewer {
  me: User
  accounts: [UserAccount!]!
  bankAccounts: [UserBankAccount!]!
}

type User {
  id: ID!
  token: String!
  phoneNumber: String
  email: String
  name: String
  achievements: [UserAchievement!]!
  pet: Pet
  primaryBankAccount: UserBankAccount
  primaryAccount: UserAccount
  lifetimeDollarsManagedEarned: Int!
}

type UserAccount {
  id: ID!
}

type UserBankAccount {
  id: ID!
  accountNumber: String
  accountName: String
}

type MutationPayload {
  success: Boolean!
  error: String
}

type CreatePetMutationPayload {
  success: Boolean!
  error: String
  pet: Pet
}

type Query {
  purchaseableItem(id: ID!): PurchaseableItem
  purchasedItem(id: ID!): PurchasedItem
  purchaseableItems: [PurchaseableItem!]!
  purchasedItems: [PurchasedItem!]!
  viewer: Viewer
}

type PurchaseItemMutationPayload {
  success: Boolean!
  error: String
  purchasedItem: PurchasedItem
}

type DEMOcreatePassiveItemMutationPayload {
  success: Boolean!
  error: String
  purchaseableItemId: ID
}

type DEMOcreatePassiveItemPizzaMutationPayload {
  success: Boolean!
  error: String
  purchaseableItemId: ID
}

input WebPushSubscriptionKeys {
  p256dh: String!
  auth: String!
}

input WebPushSubscription {
  endpoint: String!
  keys: WebPushSubscriptionKeys!
}

type DEMOcreatePassiveItemHT6MutationPayload {
  success: Boolean!
  error: String
  purchaseableItemId: ID
}

type Mutation {
  createPet(name: String!, color: String): CreatePetMutationPayload!
  updatePrimaryAccount(accountId: ID!): MutationPayload!
  updatePrimaryBankAccount(accountId: ID!): MutationPayload!
  purchaseItem(id: ID!): PurchaseItemMutationPayload!
  useItem(id: ID!): MutationPayload!
  DEMOcreatePassiveItem: DEMOcreatePassiveItemMutationPayload!
  DEMOcreatePassiveItemPizza: DEMOcreatePassiveItemPizzaMutationPayload!
  DEMOcreatePassiveItemHT6: DEMOcreatePassiveItemHT6MutationPayload!
  DEMOtriggerHungerWarning: MutationPayload!
  subscribeToWebPush(
    webPushSubscription: WebPushSubscription!
  ): MutationPayload!
  DEMOTriggerPetEarnSync: MutationPayload!
}
